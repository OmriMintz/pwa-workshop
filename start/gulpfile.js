const {
    src,
    dest,
    watch,
    series,
    parallel } = require('gulp'),
    connect = require('gulp-connect'),
    htmlmin = require('gulp-htmlmin');

exports.clearImages = clearUnusedImages;
exports.parseImages = parseImages;
exports.start = parallel(initDevServer, initWatching);

exports.default = parallel(initDevServer, initWatching);

function initDevServer() {
    return connect.server({
        root: 'dist',
        livereload: true
    });
    ;
};

function initWatching() {
    watch('src/**/*',  { events: 'all' }, series(
        parallel(
            copyImages,
            minifyJS,
            parseCSS,
            copyFonts),
        embedHTMLChanges,
        ));
};

function embedHTMLChanges() {
    const inject = require('gulp-inject');
    return src('src/index.html')
    .pipe(inject(src('dist/home/head.html'), {
        starttag: '<!-- inject:tikalDayHeadTags -->',
        transform: function (filePath, file) {
          return file.contents.toString('utf8')
        }
      }))
    .pipe(inject(src('dist/home/body.html'), {
        starttag: '<!-- inject:tikalDayBody -->',
        transform: function (filePath, file) {
          return file.contents.toString('utf8')
        }
      }))
      .pipe(htmlmin({
        collapseBooleanAttributes: true,
        collapseWhitespace: true,
        conservativeCollapse: true,
        decodeEntities: true,
        html5: true,
        includeAutoGeneratedTags: false,
        minifyJS: true,
        removeComments: true,
        removeRedundantAttributes: true
    }))
    .pipe(dest('dist'))
    .pipe(connect.reload());

}
function copyImages(srcFolder = 'src') {
    return src('src/img/**')
    .pipe(dest('dist/img'));
}
function minifyJS() {
    const uglify = require('gulp-uglify'),
        buble = require('gulp-buble');
    return src('src/**/*.js')
    .pipe(buble())
    .pipe(uglify())
    .pipe(dest('dist'));
}
function parseCSS() {
    const cssnano = require('gulp-cssnano'),
        purifycss = require('gulp-purifycss');
    return src('src/css/*.css')
    .pipe(purifycss([
        'src/**/*.html',
    ]))
    // .pipe(cssnano())
    .pipe(dest('dist/css'));
}
function copyFonts(srcFolder = 'src') {
    return src('src/fonts/*')
    .pipe(dest('dist/fonts'));
}
function reloadServer(srcFolder = 'src') {
    return src('src/fonts/*')
    .pipe(dest('dist/fonts'));
}

function parseHTML() {
    return src('originalSite/**/*.html')
    .pipe(htmlmin({
        collapseBooleanAttributes: true,
        collapseWhitespace: true,
        conservativeCollapse: true,
        decodeEntities: true,
        html5: true,
        includeAutoGeneratedTags: false,
        minifyJS: true,
        removeComments: true,
        removeRedundantAttributes: true
    }))
    .pipe(dest('dist'));
}
function clearUnusedImages() {
    const deleteUnusedImages = require('gulp-delete-unused-images'),
    rename = require('gulp-rename'),
    changeCase = require('change-case');
    return src('originalSite/**')
    .pipe(rename((path) => {
        path.dirname = changeCase.lowerCase(path.dirname);
        path.basename = changeCase.lowerCase(path.basename);
        path.extname = changeCase.lowerCase(path.extname);
      })) 
    .pipe(deleteUnusedImages({
        log: true,
        delete: true,
    }));
}
function parseImages() {
    const image = require('gulp-image');
    return src('originalSite/img/**')
    .pipe(image())
    .pipe(dest('dist/img'));
}